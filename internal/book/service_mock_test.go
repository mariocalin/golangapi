// Code generated by mockery v2.42.3. DO NOT EDIT.

package book

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockBookService is an autogenerated mock type for the BookService type
type MockBookService struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: command
func (_m *MockBookService) CreateBook(command *CreateBookCommand) (*Book, error) {
	ret := _m.Called(command)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 *Book
	var r1 error
	if rf, ok := ret.Get(0).(func(*CreateBookCommand) (*Book, error)); ok {
		return rf(command)
	}
	if rf, ok := ret.Get(0).(func(*CreateBookCommand) *Book); ok {
		r0 = rf(command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Book)
		}
	}

	if rf, ok := ret.Get(1).(func(*CreateBookCommand) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookByID provides a mock function with given fields: id
func (_m *MockBookService) GetBookByID(id uuid.UUID) (*Book, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByID")
	}

	var r0 *Book
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*Book, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *Book); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Book)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields:
func (_m *MockBookService) GetBooks() ([]Book, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBooks")
	}

	var r0 []Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: id, command
func (_m *MockBookService) UpdateBook(id uuid.UUID, command *UpdateBookCommand) error {
	ret := _m.Called(id, command)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *UpdateBookCommand) error); ok {
		r0 = rf(id, command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockBookService creates a new instance of MockBookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookService {
	mock := &MockBookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
