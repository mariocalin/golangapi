// Code generated by mockery v2.43.0. DO NOT EDIT.

package book

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockBookRepository is an autogenerated mock type for the BookRepository type
type MockBookRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: book
func (_m *MockBookRepository) Create(book *Book) error {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *MockBookRepository) FindAll() ([]Book, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *MockBookRepository) FindByID(id *uuid.UUID) (*Book, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *Book
	var r1 error
	if rf, ok := ret.Get(0).(func(*uuid.UUID) (*Book, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*uuid.UUID) *Book); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Book)
		}
	}

	if rf, ok := ret.Get(1).(func(*uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: book
func (_m *MockBookRepository) Update(book *Book) error {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockBookRepository creates a new instance of MockBookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookRepository {
	mock := &MockBookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
